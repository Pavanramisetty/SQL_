/*Look through Lesson 13b Displaying Data From Multiple Tables with Joins.sql and 
  run the code examples there, then practice Joins with the excercises below:
*/
--Practice Joining Tables

/* 1) Produce a query that shows addresses of all the departments. Show
      department name, location id, street address, city, and state or province. 
      Use NATURAL JOIN to produce your output.*/
      SELECT department_name, location_id, street_address, city, state_province 
      from departments NATURAL JOIN locations;

/* 2) Produce a report showing employees who work in Toronto. Display first and 
      last name, job, department number, department name, and city. 
      Produce your results with JOIN USING.*/          
        SELECT last_name, job_id, department_name, city
            FROM employees JOIN departments
            ON employees.department_id = departments.department_id
            JOIN locations
            ON departments.location_id = locations.location_id
            Where city = 'Toronto';


/* 3) Display employee number, last name, manager's number and last name.
      Label the columns Emp#, Employee, Mgr#, Manager. Show all employees, even
      if they have no manager. Sort the result by employee's id number. */
      SELECT employee_id AS EMP#, last_name AS employee, manager_id AS manaager#, last_name AS manager
      FROM employees 
      ORDER BY employee_id;


/* 4) For every department name, show the name of the country where the department
      is located. Show all countries even if the have no departments. */ 
      SELECT department_name, countries.country_name
      FROM departments join locations
      ON departments.location_id = locations.location_id
      join countries
      ON countries.country_id = locations.country_id;
      
      
/* 5) Create a report showing employee first and last name, department number, 
      and first and last names of their department colleagues. Do not display 
      the same employee twice in any row. Label the columns appropriately to 
      clarify the results. Order the results by employee id, even
      though it is not displayed.*/
       SELECT e.first_name, e.last_name, e.department_id, c.first_name AS MATCHEDfirstname, c.last_name AS matchedlastname
        FROM employees e  JOIN employees c
        ON e.department_id = c.department_id
        ORDER BY e.employee_id;
      
/* 6) Display last name, job, department name, salary, and salary grade level
      for all employees, even if the employee is not assigned to a department.
      Order the result by department name, job, and last name.*/ 
      SELECT last_name, job_id, department_name, salary, grade_level
      from departments JOIN employees
      ON departments.department_id = employees.department_id
      JOIN sal_grades
      ON salary BETWEEN lowest_sal AND highest_sal
      ORDER BY department_name, job_id, last_name;
      
      
/* 7) Write a query that displays employees who have had different jobs. Show
      employee number, first and last name, hire date, previous job, previous 
      job end date, and current job. Use appropriate column aliases to clarify 
      the results. Order the result by employee id and end date. */
      SELECT e.employee_id, e.first_name, e.last_name, e.hire_date, j.job_id, j.end_date, e.job_id
      FROM employees e JOIN job_history j
      ON e.department_id = j.department_id
      ORDER BY e.employee_id, j.end_date;
  
      
/* 8) Find the first and last names and hire dates of all employees who were 
      hired before their bosses. Also display the boss's last name 
      and hire date. Be sure to use apprpriate column aliases where needed. */
    --  SELECT first_name, last_name, hire_date, e1.
      SELECT e.first_name AS empfirstname, e.last_name AS emplastname, e.hire_Date AS emphiredate, e1.last_name AS bosslastname, e1.hire_date AS bosshiredate
      FROM employees e JOIN employees e1
      ON e.department_id = e1.department_id
      WHERE e.hire_date > e1.hire_date;
          
/* 9) For every country name, show how many departments are located in that country.
       Use a column alias to clarify the meaning of the numbers.*/
      SELECT country_name,department_id
      FROM countries c JOIN locations l
      ON c.country_id = l.country_id
      JOIN departments d
      ON l.location_id=d.location_id;
         
--------- CUST SALES Tables ----------------------

/* 10)For every sale, show the id, first and last names, email, and phone of the customer, 
      the first and last names of the sales representative, and the sales amount. 
      Order the result by customer id and sales amount.*/
      SELECT sales_id, cust_fname, cust_lname, cust_email, cust_phone, sales_amt
      FROM CUSTOMERS c FULL OUTER JOIN SALES s
      ON c.cust_id = s.sales_id
      ORDER BY c.cust_id, s.sales_AMT;